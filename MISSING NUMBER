// Time Complexity: O(N), where N is the size of array arr[].
// Auxiliary Space: O(1)
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const ll mod = 1e9+7;
 
// function to find the missing number from 1 to N
int solve(int N, int* arr)
{
    // Variable to store the value of XOR
    int XOR = 0;
    for (int i = 0; i < N - 1; i++) {
        // XOR of all elements in arr[]
        XOR ^= arr[i];
        // XOR of all numbers from 1 to N - 1
        XOR ^= (i + 1);
    }
    XOR ^= N;
    return XOR;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int n;
  cin>>n;
  int arr[n];
  for(int i =0;i<n;i++){
    cin>>arr[i];
  }
    cout << solve(n, arr) << "\n";
    return 0;
}
